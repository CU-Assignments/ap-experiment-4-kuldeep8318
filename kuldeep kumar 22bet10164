public class Solution {
    
    public int reverseBits(int n) {
        int result = 0;
        for (int i = 0; i < 32; i++) {
            result <<= 1;
            result |= (n & 1);
            n >>= 1;
        }
        return result;
    }
    
    public int hammingWeight(int n) {
        int count = 0;
        while (n != 0) {
            count += (n & 1);
            n >>= 1;
        }
        return count;
    }
    
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0], currentSum = nums[0];
        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }
        return maxSum;
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        
        int row = 0, col = matrix[0].length - 1;
        while (row < matrix.length && col >= 0) {
            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] > target) {
                col--;
            } else {
                row++;
            }
        }
        return false;
    }
    
    public int superPow(int a, int[] b) {
        int mod = 1337;
        return superPowHelper(a, b, b.length - 1, mod);
    }
    
    private int superPowHelper(int a, int[] b, int index, int mod) {
        if (index < 0) return 1;
        int lastDigit = b[index];
        int part1 = powerMod(a, lastDigit, mod);
        int part2 = powerMod(superPowHelper(a, b, index - 1, mod), 10, mod);
        return (part1 * part2) % mod;
    }
    
    private int powerMod(int a, int b, int mod) {
        int result = 1;
        a %= mod;
        while (b > 0) {
            if (b % 2 == 1) result = (result * a) % mod;
            a = (a * a) % mod;
            b /= 2;
        }
        return result;
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.reverseBits(0b00000010100101000001111010011100)); // Output: 964176192
        System.out.println(solution.reverseBits(0b11111111111111111111111111111101)); // Output: 3221225471
        
        System.out.println(solution.hammingWeight(11)); // Output: 3
        System.out.println(solution.hammingWeight(128)); // Output: 1
        System.out.println(solution.hammingWeight(2147483645)); // Output: 30
        
        System.out.println(solution.maxSubArray(new int[]{-2,1,-3,4,-1,2,1,-5,4})); // Output: 6
        System.out.println(solution.maxSubArray(new int[]{1})); // Output: 1
        System.out.println(solution.maxSubArray(new int[]{5,4,-1,7,8})); // Output: 23
        
        int[][] matrix = {
            {1, 4, 7, 11, 15},
            {2, 5, 8, 12, 19},
            {3, 6, 9, 16, 22},
            {10, 13, 14, 17, 24},
            {18, 21, 23, 26, 30}
        };
        System.out.println(solution.searchMatrix(matrix, 5)); // Output: true
        System.out.println(solution.searchMatrix(matrix, 20)); // Output: false
        
        System.out.println(solution.superPow(2, new int[]{3})); // Output: 8
        System.out.println(solution.superPow(2, new int[]{1,0})); // Output: 1024
        System.out.println(solution.superPow(1, new int[]{4,3,3,8,5,2})); // Output: 1
    }
}

public class Solution {
    
    public int reverseBits(int n) {
        int result = 0;
        for (int i = 0; i < 32; i++) {
            result <<= 1;
            result |= (n & 1);
            n >>= 1;
        }
        return result;
    }
    
    public int hammingWeight(int n) {
        int count = 0;
        while (n != 0) {
            count += (n & 1);
            n >>= 1;
        }
        return count;
    }
    
    public int maxSubArray(int[] nums) {
        int maxSum = nums[0], currentSum = nums[0];
        for (int i = 1; i < nums.length; i++) {
            currentSum = Math.max(nums[i], currentSum + nums[i]);
            maxSum = Math.max(maxSum, currentSum);
        }
        return maxSum;
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return false;
        }
        
        int row = 0, col = matrix[0].length - 1;
        while (row < matrix.length && col >= 0) {
            if (matrix[row][col] == target) {
                return true;
            } else if (matrix[row][col] > target) {
                col--;
            } else {
                row++;
            }
        }
        return false;
    }
    
    public int superPow(int a, int[] b) {
        int mod = 1337;
        return superPowHelper(a, b, b.length - 1, mod);
    }
    
    private int superPowHelper(int a, int[] b, int index, int mod) {
        if (index < 0) return 1;
        int lastDigit = b[index];
        int part1 = powerMod(a, lastDigit, mod);
        int part2 = powerMod(superPowHelper(a, b, index - 1, mod), 10, mod);
        return (part1 * part2) % mod;
    }
    
    private int powerMod(int a, int b, int mod) {
        int result = 1;
        a %= mod;
        while (b > 0) {
            if (b % 2 == 1) result = (result * a) % mod;
            a = (a * a) % mod;
            b /= 2;
        }
        return result;
    }
    
    public int[] beautifulArray(int n) {
        List<Integer> result = new ArrayList<>();
        result.add(1);
        while (result.size() < n) {
            List<Integer> temp = new ArrayList<>();
            for (int num : result) {
                if (num * 2 - 1 <= n) temp.add(num * 2 - 1);
            }
            for (int num : result) {
                if (num * 2 <= n) temp.add(num * 2);
            }
            result = temp;
        }
        return result.stream().mapToInt(i -> i).toArray();
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        System.out.println(solution.reverseBits(0b00000010100101000001111010011100)); // Output: 964176192
        System.out.println(solution.reverseBits(0b11111111111111111111111111111101)); // Output: 3221225471
        
        System.out.println(solution.hammingWeight(11)); // Output: 3
        System.out.println(solution.hammingWeight(128)); // Output: 1
        System.out.println(solution.hammingWeight(2147483645)); // Output: 30
        
        System.out.println(solution.maxSubArray(new int[]{-2,1,-3,4,-1,2,1,-5,4})); // Output: 6
        System.out.println(solution.maxSubArray(new int[]{1})); // Output: 1
        System.out.println(solution.maxSubArray(new int[]{5,4,-1,7,8})); // Output: 23
        
        int[][] matrix = {
            {1, 4, 7, 11, 15},
            {2, 5, 8, 12, 19},
            {3, 6, 9, 16, 22},
            {10, 13, 14, 17, 24},
            {18, 21, 23, 26, 30}
        };
        System.out.println(solution.searchMatrix(matrix, 5)); // Output: true
        System.out.println(solution.searchMatrix(matrix, 20)); // Output: false
        
        System.out.println(solution.superPow(2, new int[]{3})); // Output: 8
        System.out.println(solution.superPow(2, new int[]{1,0})); // Output: 1024
        System.out.println(solution.superPow(1, new int[]{4,3,3,8,5,2})); // Output: 1
        
        System.out.println(Arrays.toString(solution.beautifulArray(4))); // Output: [2, 1, 4, 3]
        System.out.println(Arrays.toString(solution.beautifulArray(5))); // Output: [3, 1, 2, 5, 4]
    }
}
import heapq

def getSkyline(buildings):
    # Step 1: Prepare the list of events
    events = []
    for left, right, height in buildings:
        events.append((left, height))  # A building starts
        events.append((right, -height))  # A building ends (negative height for removal)
    
    # Step 2: Sort the events
    # Sort first by x coordinate, if x is the same, sort by height (larger height first for start events)
    events.sort(key=lambda x: (x[0], x[1]))
    
    # Step 3: Sweep line with a max-heap
    result = []
    max_heap = [(0, float('inf'))]  # (height, right), initialize with ground level at infinity
    prev_height = 0
    
    # Step 4: Process events
    for x, height in events:
        if height > 0:  # It's a start event
            heapq.heappush(max_heap, (-height, x))  # We push negative height to simulate max heap
        else:  # It's an end event
            max_heap = [(h, r) for h, r in max_heap if r != -height]
            heapq.heapify(max_heap)
        
        # Get the current max height from the heap (which will be the tallest building in the heap)
        current_height = -max_heap[0][0]
        
        # If the height has changed, add the current point to the result
        if current_height != prev_height:
            result.append([x, current_height])
            prev_height = current_height
    
    return result
public class Solution {
    public int reversePairs(int[] nums) {
        if (nums == null || nums.length < 2) {
            return 0;
        }
        return mergeSort(nums, 0, nums.length - 1);
    }

    private int mergeSort(int[] nums, int left, int right) {
        if (left >= right) {
            return 0;
        }
        int mid = left + (right - left) / 2;
        
        // Count reverse pairs in the left and right halves
        int count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right);
        
        // Count reverse pairs between the left and right halves during merging
        count += countCrossPairs(nums, left, mid, right);
        
        // Merge the two halves
        merge(nums, left, mid, right);
        
        return count;
    }

    private int countCrossPairs(int[] nums, int left, int mid, int right) {
        int count = 0;
        int j = mid + 1;
        
        // For each element in the left part, count how many elements in the right part satisfy nums[i] > 2 * nums[j]
        for (int i = left; i <= mid; i++) {
            while (j <= right && nums[i] > 2L * nums[j]) {
                j++;
            }
            count += j - (mid + 1);
        }
        
        return count;
    }

    private void merge(int[] nums, int left, int mid, int right) {
        int[] temp = new int[right - left + 1];
        int i = left, j = mid + 1, k = 0;
        
        // Merge two sorted halves into temp array
        while (i <= mid && j <= right) {
            if (nums[i] <= nums[j]) {
                temp[k++] = nums[i++];
            } else {
                temp[k++] = nums[j++];
            }
        }
        
        while (i <= mid) {
            temp[k++] = nums[i++];
        }
        
        while (j <= right) {
            temp[k++] = nums[j++];
        }
        
        // Copy the sorted values back into the original array
        System.arraycopy(temp, 0, nums, left, temp.length);
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        
        int[] nums1 = {1, 3, 2, 3, 1};
        System.out.println(solution.reversePairs(nums1));  // Output: 2
        
        int[] nums2 = {2, 4, 3, 5, 1};
        System.out.println(solution.reversePairs(nums2));  // Output: 3
    }
}


